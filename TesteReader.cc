// ======================================
// MadGraph Reader Root Script
// Reads the Root file generated by MadGraph and converted by ExRootAnalysis
// Example for the process p p > mu+ mu-
// EMG 26-07-22
// ======================================

#include "TFile.h"
#include "TLorentzVector.h"
#include "TTreeReader.h"
#include "TTreeReaderArray.h"
#include "ostream"
#include "stdlib.h"
#include <cmath>
#include <sstream>
#include <string>
#include <TCanvas.h>
#include <TLatex.h>



void TesteReader() {
  // Opening files
  TFile* fileDft = new TFile("unweighted_events.root");
  TFile* fileDph = new TFile("tag_1_delphes_events.root");

  // Reader For the Deafult Tree
  TTreeReader readerDft("LHEF", fileDft);
  TTreeReaderArray<long long> Number(readerDft, "Event.Number");
  TTreeReaderArray<Int_t> NParticles(readerDft, "Particle_size");
  TTreeReaderArray<Int_t> PID(readerDft, "Particle.PID");
  TTreeReaderArray<Int_t> Status(readerDft, "Particle.Status");
  TTreeReaderArray<Double_t> E(readerDft, "Particle.E");
  TTreeReaderArray<Double_t> Px(readerDft, "Particle.Px");
  TTreeReaderArray<Double_t> Py(readerDft, "Particle.Py");
  TTreeReaderArray<Double_t> Pz(readerDft, "Particle.Pz");
  TTreeReaderArray<Double_t> PT(readerDft, "Particle.PT");
  TTreeReaderArray<Double_t> Eta(readerDft, "Particle.Eta");
  TTreeReaderArray<Double_t> Phi(readerDft, "Particle.Phi");

  // Reader for the Delphes Tree
  TTreeReader readerDph("Delphes", fileDph);
  // Delphes Branches
  TTreeReaderArray<long long> NumberDph(readerDph, "Event.Number");
  TTreeReaderArray<Int_t> NParticlesDph(readerDph, "Muon_size");
  TTreeReaderArray<float_t>       PTDph(readerDph, "Muon.PT");
  TTreeReaderArray<float_t>      EtaDph(readerDph, "Muon.Eta");
  TTreeReaderArray<Int_t>     ChargeDph(readerDph, "Muon.Charge");
  TTreeReaderArray<float_t>      PhiDph(readerDph, "Muon.Phi");
  // Pythia Branches
  TTreeReaderArray<long long> NumberPth(readerDph, "Event.Number");
  TTreeReaderArray<Int_t> NParticlesPth(readerDph, "Particle_size");
  TTreeReaderArray<Int_t>        PIDPth(readerDph, "Particle.PID");
  TTreeReaderArray<Int_t>     StatusPth(readerDph, "Particle.Status");
  TTreeReaderArray<float_t>        EPth(readerDph, "Particle.E");
  TTreeReaderArray<float_t>       PxPth(readerDph, "Particle.Px");
  TTreeReaderArray<float_t>       PyPth(readerDph, "Particle.Py");
  TTreeReaderArray<float_t>       PzPth(readerDph, "Particle.Pz");
  TTreeReaderArray<float_t>       PTPth(readerDph, "Particle.PT");
  TTreeReaderArray<float_t>      EtaPth(readerDph, "Particle.Eta");
  TTreeReaderArray<float_t>      PhiPth(readerDph, "Particle.Phi");

  TCanvas* c = new TCanvas("c", "Event Generator Mass Comparison", 0, 0, 1600, 1200);
  c->Divide(3,1);

  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Histogram construction for the DEFAULT Tree
  TH1F* hInvMassDft = new TH1F("", "Madgraph MG5", 70, 0, 140);

  TF1* lorentz1 = new TF1("lorentz1", "[0]/(TMath::Pi() * [1] * (1 + ((x - [2]) / [1])^2))", 10,150);
  TF1* lorentz2 = new TF1("lorentz2", "[0]/(TMath::Pi() * [1] * (1 + ((x - [2]) / [1])^2))", 10,150);
  TF1* lorentz3 = new TF1("lorentz3", "[0]/(TMath::Pi() * [1] * (1 + ((x - [2]) / [1])^2))", 10,150);
  

  lorentz1->SetParameters(4000, 5, 90);
  lorentz2->SetParameters(4000, 5, 90);
  lorentz3->SetParameters(2000, 5, 90);
  

  TLorentzVector pMuPDft;
  TLorentzVector pMuMDft;
  TLorentzVector auxMuPDft;
  TLorentzVector auxMuMDft;
  double MaxPDft;
  double MaxMDft;

  while (readerDft.Next()) {
    int NDft = 0;
    MaxPDft = 0;
    MaxMDft = 0;
    pMuMDft.SetPxPyPzE(0, 0, 0, 0);
    pMuPDft.SetPxPyPzE(0, 0, 0, 0);
    
    for (Int_t i = 0; i < NParticles[0]; i++) {
      if (PID[i] == 13) {
        auxMuPDft.SetPxPyPzE(Px[i], Py[i], Pz[i], E[i]);
        NDft++;
        if (MaxPDft < auxMuPDft.Pt()){
          pMuPDft = auxMuPDft;
          MaxPDft = auxMuPDft.Pt();
        }
      }
      if (PID[i] == -13) {
        auxMuMDft.SetPxPyPzE(Px[i], Py[i], Pz[i], E[i]);
        NDft++;
        if (MaxMDft < auxMuMDft.Pt()){
          pMuMDft = auxMuMDft;
          MaxMDft = auxMuMDft.Pt();
        }
        
      }
   
    }
    
    
    hInvMassDft->Fill(((pMuPDft + pMuMDft).M()));
  }

  




  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Histogram construction for the Delphes Tree
  TH1F* hInvMassDph = new TH1F("", "Delphes", 70, 0, 140);
  TH1F* hInvMassPth = new TH1F("", "Pythia", 70, 0, 140);

  TLorentzVector pMuPPth;
  TLorentzVector pMuMPth;
  TLorentzVector auxPPth;
  TLorentzVector auxMPth;
  double MaxPPth;
  double MaxMPth;

  TLorentzVector pMuPDph;
  TLorentzVector pMuMDph;
  TLorentzVector auxPDph;
  TLorentzVector auxMDph;
  double MaxPDph;
  double MaxMDph;

  while (readerDph.Next()) {
    int NDph = 0;
    int NPth = 0;
    MaxPDph = 0;
    MaxMDph = 0;
    // Delphes Histograms
    pMuPDph.SetPxPyPzE(0,0,0,0);
    pMuMDph.SetPxPyPzE(0,0,0,0);
    for (Int_t i = 0; i < NParticlesDph[0]; i++) {
      if (ChargeDph[i] > 0) {
        auxPDph.SetPtEtaPhiM(PTDph[i], EtaDph[i], PhiDph[i], 0.1056583755);
        NDph++;
        if (MaxPDph < auxPDph.Pt()){
          pMuPDph = auxPDph;
          MaxPDph = auxPDph.Pt();
        }
      }
      if (ChargeDph[i] < 0) {
        auxMDph.SetPtEtaPhiM(PTDph[i], EtaDph[i], PhiDph[i], 0.1056583755);
        NDph++;
        if (MaxMDph < auxMDph.Pt()) {
          pMuMDph = auxMDph;
          MaxMDph = auxMDph.Pt();
        }
      }
      
    }
    if (NDph >= 2){
    hInvMassDph->Fill(((pMuPDph + pMuMDph).M()));

    

    // Pythia Histograms
    pMuPPth.SetPxPyPzE(0,0,0,0);
    pMuMPth.SetPxPyPzE(0,0,0,0);
    MaxPPth = 0;
    MaxMPth = 0;
    for (Int_t i = 0; i < NParticlesPth[0]; i++) {
      if (PIDPth[i] == -13) {
        auxMPth.SetPxPyPzE(PxPth[i], PyPth[i], PzPth[i], EPth[i]);
        NPth++;
        if (MaxMPth < auxMPth.Pt()){
          pMuMPth = auxMPth;
          MaxMPth = auxMPth.Pt();
        }
      }
      if (PIDPth[i] == 13) {
        auxPPth.SetPxPyPzE(PxPth[i], PyPth[i], PzPth[i], EPth[i]);
        NPth++;
        if (MaxPPth < auxPPth.Pt()) {
          pMuPPth = auxPPth;
          MaxPPth = auxPPth.Pt();
        }
      }
    }
    
    hInvMassPth->Fill(((pMuPPth + pMuMPth).M()));
    
  }

  // Defining the "writing function"
  TLatex *latex = new TLatex();
  latex->SetTextSize(0.06);
  latex->SetTextFont(42);
  
  
  
  
  // Customizing histograms
  lorentz1->SetLineColor(kGreen+3);
  hInvMassDft->SetLineStyle(3);
  hInvMassPth->SetLineStyle(3);
  hInvMassDph->SetLineStyle(3);
  lorentz1->SetLineStyle(1);
  lorentz2->SetLineStyle(1);
  lorentz3->SetLineStyle(1);
  lorentz2->SetLineColor(kRed+3);
  lorentz3->SetLineColor(kCyan+3);

  hInvMassDft->SetFillColor(kGreen-7);
  hInvMassPth->SetFillColor(kRed-7);
  hInvMassDph->SetFillColor(kCyan-7);

//Selecting the first canva
  c->cd(1)->SetLogy();
  hInvMassDft->Fit("lorentz1", "QRS");
  hInvMassDft->Draw("same");
  hInvMassDft->Draw("same F");
  hInvMassDft->GetXaxis()->SetTitle("Massa (GeV)");
  hInvMassDft->SetStats(kFALSE);
  double amplitudeMG = lorentz1->GetParameter(0);
  double widthMG = lorentz1->GetParameter(1);
  double massMG = lorentz1->GetParameter(2);


  //Getting first lorentzian parameters
  double errorAmplitudeMG = lorentz1->GetParError(0);
  
  double errorWidthMG = lorentz1->GetParError(1);
  
  double errorMassMG = lorentz1->GetParError(2);

  // writing on the first canva

  latex->DrawLatexNDC(0.2, 0.8, Form("M = %.3f \\pm %.3f GeV", massMG,errorMassMG));
  latex->DrawLatexNDC(0.2, 0.7, Form("\\Gamma = %.3f \\pm %.3f GeV", widthMG,errorWidthMG));
  
  //Selecting the second canva

  c->cd(2)->SetLogy();
  hInvMassPth->Draw("same");
  hInvMassPth->Draw("same F");
  hInvMassPth->Fit("lorentz2", "QRS");
  hInvMassPth->GetXaxis()->SetTitle("Massa (GeV)");
  hInvMassPth->SetStats(kFALSE);
  double amplitudePyt = lorentz2->GetParameter(0);
  double widthPyt = lorentz2->GetParameter(1);
  double massPyt = lorentz2->GetParameter(2);

  //Getting second lorentzian parameters
  double errorAmplitudePyt = lorentz2->GetParError(0);
  
  double errorWidthPyt = lorentz2->GetParError(1);
  
  double errorMassPyt = lorentz2->GetParError(2);

  // writing on the first canva

  latex->DrawLatexNDC(0.2, 0.8, Form("M = %.3f \\pm %.3f GeV", massPyt,errorMassPyt));
  latex->DrawLatexNDC(0.2, 0.7, Form("\\Gamma = %.3f \\pm %.3f GeV", widthPyt,errorWidthPyt));

//Selecting the third canva
  c->cd(3)->SetLogy();

  hInvMassDph->Draw("same");
  hInvMassDph->Draw("same F");
  hInvMassDph->Fit("lorentz3", "QRS");
  hInvMassDph->GetXaxis()->SetTitle("Massa (GeV)");
  hInvMassDph->SetStats(kFALSE);
  double amplitudeDph = lorentz3->GetParameter(0);
  double  widthDph = lorentz3->GetParameter(1);
  double massDph = lorentz3->GetParameter(2);

  //Getting first lorentzian parameters
  double errorAmplitudeDph = lorentz3->GetParError(0);
  
  double errorWidthDph = lorentz3->GetParError(1);
  
  double errorMassDph = lorentz3->GetParError(2);

 //writing on the third canva
  latex->DrawLatexNDC(0.2, 0.8, Form("M = %.3f \\pm %.3f GeV", massDph,errorMassDph));
  latex->DrawLatexNDC(0.2, 0.7, Form("\\Gamma = %.3f \\pm %.3f GeV", widthDph,errorWidthDph));
  
  
  
  
  c->Print("MaxPTMuonLorentzian.pdf");
  
  
}
